# Workflow Name
name: "infra-gitops"

# Workflow Trigger
on:
  push:
    branches:
      - main
    paths:
      - terraform/**
  workflow_dispatch: # Enable manual trigger for destroy job

# Workflow Environment
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}

# Define Jobs
jobs:
  terraform:
    name: "Deploy Infra with Terraform on AWS"
    runs-on: ubuntu-latest
    # Run only on push event
    if: github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: terraform
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true
      
      - name: Terraform plan status
        if: steps.plan.status != 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get Kubernetes Configure
        id: getconfig
        if: steps.apply.status == 'success'
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}
      
      - name: Install Ingress Controller
        if: steps.apply.status == 'success'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml
      
  destroy:
    name: "Destroy Infra with Terraform on AWS"
    runs-on: ubuntu-latest
    # Only trigger for workflow_dispatch
    if: github.event_name == 'workflow_dispatch'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get Kubernetes Configure
        id: getconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}
      
      - name: Destroy Ingress Controller
        id: destroy-ingress
        run: |
          kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml
      
      - name: Empty ECR Repository
        id: destroy-ecr
        run: |
          REPOSITORY_NAME=${{ vars.ECR_REPO }}
          IMAGES=$(aws ecr list-images --repository-name $REPOSITORY_NAME --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            echo "Deleting images in repository $REPOSITORY_NAME..."
            aws ecr batch-delete-image --repository-name $REPOSITORY_NAME --image-ids "$IMAGES"
          else
            echo "No images found in repository $REPOSITORY_NAME."
          fi 

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false